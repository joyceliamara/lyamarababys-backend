generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String         @id @default(uuid())
  sku         String
  name        String
  subtitle    String         @default("")
  composition String         @default("")
  price       Float
  discount    Float
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  quantity    Quantity[]
  images      ProductImage[]
  order       Order?         @relation(fields: [orderId], references: [id])
  orderId     String?
  users       User[]
  cart        Cart[]

  @@map("products")
}

model Quantity {
  id        Int      @id @default(autoincrement())
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  gender    Gender   @relation(fields: [genderId], references: [id])
  genderId  String
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String

  @@map("quantities")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product[]

  @@map("categories")
}

model Gender {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  quantity  Quantity[]

  @@map("genders")
}

model Size {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Quantity  Quantity[]

  @@map("sizes")
}

model Color {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  quantity  Quantity[]

  @@map("colors")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  main      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("product_images")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  order     Order[]
  contact   Contact?
  address   Address[]
  favorites Product[]
  cart      Cart[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Contact {
  id        String   @id @default(uuid())
  name      String?
  surname   String?
  phone     String?  @unique
  cpf       String?  @unique
  bornDate  DateTime @map("born_date")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Address {
  id           String   @id @default(uuid())
  cep          String
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  main         Boolean  @default(false)
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model Cart {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  products  Product[]
  order     Order?

  @@map("carts")
}

model Order {
  id           String    @id @default(uuid())
  total        Float
  discount     Float
  status       Status    @default(CREATED)
  trackingCode String?   @map("tracking_code")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @map("user_id")
  products     Product[]
  cart         Cart      @relation(fields: [cartId], references: [id])
  cartId       String    @unique

  @@map("orders")
}

enum Status {
  CREATED
  WAITING
  ON_THE_WAY
  DELIVERED
  CANCELED
}
