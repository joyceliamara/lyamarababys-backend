generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Product {
  id         String     @id @default(uuid())
  sku        String
  name       String
  price      Float
  discount   Float
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  categories Category[]
  genders    Gender[]
  quantities Quantity[]
  colors     Color[]
  users      User[]
  cart       Cart[]

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Gender {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("genders")
}

model Size {
  id         String     @id @default(uuid())
  name       String     @unique
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  quantities Quantity[]
  cart       Cart[]

  @@map("sizes")
}

model Quantity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  count     Int
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  @@map("quantities")
}

model Color {
  id        String    @id @default(uuid())
  name      String    @unique
  code      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product[]
  cart      Cart[]

  @@map("colors")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  favorites Product[]
  cart      Cart[]
  order     Order[]
  contact   Contact?
  address   Address[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Contact {
  id        String   @id @default(uuid())
  name      String?
  surname   String?
  phone     String?  @unique
  cpf       String?  @unique
  bornDate  DateTime @map("born_date")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Address {
  id           String   @id @default(uuid())
  cep          String
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @unique
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model Cart {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?

  @@map("carts")
}

model Order {
  id           String   @id @default(uuid())
  total        Float
  discount     Float
  status       Status   @default(CREATED)
  cartItem     Cart[]
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  trackingCode String?  @map("tracking_code")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

enum Status {
  CREATED
  WAITING
  ON_THE_WAY
  DELIVERED
}
